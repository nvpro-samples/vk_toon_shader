/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 450


layout(local_size_x = 32, local_size_y = 32) in;
layout(binding = 0, rgba8) uniform image2D inImage;
layout(binding = 1) buffer outValue
{
  uint minmax[2];
};

// Extracting the zNear and zFar of the image, storing the value in outValue.

void main()
{
  ivec2 size = imageSize(inImage);
  if(gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y)
    return;

  vec4 fragColor = imageLoad(inImage, ivec2(gl_GlobalInvocationID.xy));

  if(fragColor.z > 0)
  {
    atomicMin(minmax[0], floatBitsToInt(fragColor.z));
    atomicMax(minmax[1], floatBitsToInt(fragColor.z));
  }
}
